{
  "pages": [
    {
      "id": 1,
      "title": "search-article",
      "components": [
        {
          "type": "TextArea",
          "data": {
            "title": "Next JS Development Demo",
            "description": "Showcases the capabilities and features of Next.js, providing insights and examples for developers to explore and learn from.",
            "newWindow": false,
            "cta": {
              "ctaText": "Go to Main",
              "ctaUrl": "/",
              "ctaType": "link"
            }
          }
        },
        {
          "type": "ArticleCards",
          "data": {
            "withSearch": true,
            "cardBlocks": [
              {
                "cardTitle": "The Project Workflow: Next JS",
                "cardCopy": "Delves into the author's experience and coding standards while working with Next.js, offering insights into effective practices, challenges faced, and solutions discovered.",
                "cardUrl": "/the-project-workflow-next-js"
              },
              {
                "cardTitle": "Tech Stack and Dependencies",
                "cardCopy": "This highlights the importance of choosing the right tech dependencies and explores the advantages of utilizing Next.js and key technologies.",
                "cardUrl": "/tech-stack-and-dependencies"
              },
              {
                "cardTitle": "The Purpose Behind its Creation",
                "cardCopy": "",
                "cardUrl": "/"
              },
              {
                "cardTitle": "Decoding Project Setup",
                "cardCopy": "",
                "cardUrl": "/"
              },
              {
                "cardTitle": "Unlocking Efficiency: The Atomic Approach",
                "cardCopy": "",
                "cardUrl": "/"
              },
              {
                "cardTitle": "Typescript Interfaces: Empowering Code Flexibility and Consistency",
                "cardCopy": "",
                "cardUrl": "/"
              }
            ]
          }
        }
      ]
    },
    {
      "id": 2,
      "title": "about",
      "components": [
        {
          "type": "TextArea",
          "data": {
            "title": "Next JS Development Demo",
            "description": "Creting Next JS with the following dependencies might make it easier.",
            "cta": {
              "ctaText": "View More",
              "ctaUrl": "/",
              "ctaType": "link"
            }
          }
        },
        {
          "type": "WYSIWYG",
          "data": {
            "content": "<h2> Why this Project is Created </h2> <p> This is create to help developers view how NEXT JS is used for front end and how dependecies is used. How a project benefits from these dependeciesshowcase my knowledge of the tech used for front end development. </p> <br> <a class='cta'> Go Home </a>"
          }
        },
        {
          "type": "TechCards",
          "data": {
            "cards": [
              {
                "eyebrow": "Framework",
                "title": "Next JS",
                "copy": "",
                "cta": {
                  "ctaText": "Learn More",
                  "ctaUrl": "/",
                  "ctaType": "link"
                }
              },
              {
                "eyebrow": "Framework",
                "title": "Next JS",
                "copy": "",
                "cta": {
                  "ctaText": "Learn More",
                  "ctaUrl": "/",
                  "ctaType": "link"
                }
              },
              {
                "eyebrow": "Framework",
                "title": "Next JS",
                "copy": "",
                "cta": {
                  "ctaText": "Learn More",
                  "ctaUrl": "/",
                  "ctaType": "link"
                }
              }
            ]
          }
        }
      ]
    },
    {
      "id": 3,
      "title": "the-project-workflow-next-js",
      "components": [
        {
          "type": "TextArea",
          "data": {
            "title": "The Project Workflow: Next JS",
            "description": "Delves into the author's experience and coding standards while working with Next.js, offering insights into effective practices, challenges faced, and solutions discovered.",
            "author": "Paolo Ligsay",
            "newWindow": false,
            "cta": {
              "ctaText": "Go Back",
              "ctaUrl": "/search-article",
              "ctaType": "link"
            }
          }
        },
        {
          "type": "ArticleContent",
          "data": {
            "content": "<p>This article explores the project workflow for a <span class='code'>Next.js</span> project combined with <span class='code'>Tailwind</span>, <span class='code'>Storybook</span>, <span class='code'>Plop</span>, <span class='code'>Jest</span>, and other tech stack dependencies. It begins by introducing the project as a demo and provides a link to a separate article that details the tech stack and dependencies used.</p><br /><br /><h2>üî¨ Understanding the <span class='code'>Atomic Approach</span></h2><br /><p>To understand the workflow for this project, it is important to grasp the concept of the <span class='code'>Atomic Approach</span>. This approach is further explained in the article titled <a href='/unlockin-efficiency-the-atomic-approach'>Unlocking Efficiency: The Atomic Approach</a>.</p><br /><br /><h2>üöÄ Component Generation</h2><br /><p>To get started, open the terminal and run the command <span class='code'>Yarn Generate</span>. This will prompt you to choose the type of component you want to create, such as <span class='code'>Atom</span>, <span class='code'>Molecule</span>, or <span class='code'>Organism</span>. Once selected, the generated component will be placed inside the /components folder. The generated component will consist of various files, including interface.tsx, stories.tsx, styles.tsx, test.tsx, component.tsx, and index.tsx.</p><br /><br /><h2>‚öôÔ∏è Configuring the Generated Files</h2><br /><p>For a more detailed understanding of the project setup and how to configure the generated files, refer to the article <a href='/decoding-project-setup'>Decoding Project Setup</a>. Each file can be refactored based on your specific needs. Here are some considerations for each file: <br/><br/> <span class='code'>Interface.tsx</span>: Add interfaces and types while removing unnecessary keys. <br/><br/> <span class='code'>component.tsx</span>: Refactor the container and content if a component requires different behavior. <br/><br/> <span class='code'>stories.tsx</span>: Add values inside args: {} to further test the component within Storybook. <br/><br/> <span class='code'>test.tsx</span>: No changes are typically required, but you can add more tests and configure them if needed. <br/><br/> <span class='code'>styles.tsx</span>: This will enhance styles for your component. You can also improve readability using <span class='code'>ctl()</span>, and organize classes on new lines and will still be rendered on a single line. You can also pass parameters using syntax like <span class='code'>title: () => ctl(``)</span>.</p><br /><br /><h2>üëÄ Previewing Components</h2><br /><p>After configuring the files, you can preview the components in Storybook by running the command <span class='code'>Yarn Storybook</span>. This allows you to test and view the components in an isolated environment.</p><br /><br /><h2>üñ•Ô∏è Displaying Components on Pages</h2><br /><p>To display the components on actual pages, ensure that the added component is included in the <span class='code'>componentMap</span> file located at <span class='code'>/lib/constants/componentMap.tsx</span>. Once added, the component will be automatically rendered as long as it is present in the <span class='code'>data.json</span> file located at <span class='code'>/data/data.json</span>.</p><br /><br /><h2>üéØ Rendering Process</h2><br /><p>To understand how the rendering process works, examine the <span class='code'>[...slug].tsx</span> file. It showcases how the components are mapped and returns a <span class='code'>404 error</span> if the requested URL does not correspond to a valid page.</p><br /><br /><h2>üí° Conclusion</h2><br /><p>By following this project workflow, developers can efficiently work with <span class='code'>Next.js</span>, <span class='code'>Tailwind</span>, <span class='code'>Storybook</span>, <span class='code'>Plop</span>, <span class='code'>Jest</span>, and other tech stack dependencies while adhering to coding standards and best practices.</p>"
          }
        }
      ]
    },
    {
      "id": 4,
      "title": "tech-stack-and-dependencies",
      "components": [
        {
          "type": "TextArea",
          "data": {
            "title": "The Project Workflow: Next JS",
            "description": "Delves into the author's experience and coding standards while working with Next.js, offering insights into effective practices, challenges faced, and solutions discovered.",
            "author": "Paolo Ligsay",
            "newWindow": false,
            "cta": {
              "ctaText": "Go Back",
              "ctaUrl": "/search-article",
              "ctaType": "link"
            }
          }
        },
        {
          "type": "ArticleContent",
          "data": {
            "content": "<h2>üî• The Importance of Choosing the Right Tech Dependencies</h2><br><p>Choosing the right tech dependencies is crucial for the success of a project. In this section, we will explore the importance of selecting the appropriate technologies and the advantages they bring.</p><br><p>Next.js, a powerful framework, plays a pivotal role in the project's tech stack. In this section, we will delve into the importance of Next.js and its flexibility in enabling efficient development.</p><br><br><h2>üõ†Ô∏è Key Technologies and Dependencies</h2><br><p>In this section, we will discuss the specific technologies and dependencies used in the project and their significance. The following are the key components in the project's tech stack:</p><br><p><span class='code'>Tailwind CSS:</span> Rapid UI development and customization through a utility-first CSS framework.</p><br><p><span class='code'>Storybook:</span> Building and documenting components in isolation, facilitating collaboration and streamlining the design and development workflow.</p><br><p><span class='code'>Plop:</span> Automating repetitive tasks and maintaining code consistency, improving productivity.</p><br><p><span class='code'>Jest:</span> Writing comprehensive unit tests for JavaScript applications to ensure code quality and catch bugs early.</p><br><p><span class='code'>Html-react-parser:</span> Parsing and rendering HTML strings as React components, useful for handling dynamic content from external sources.</p><br><p><span class='code'>TypeScript:</span> A statically-typed superset of JavaScript that enhances development safety, productivity, and maintainability.</p><br><br><h2>References for Further Exploration üìö</h2><br><p>To gain more insights into the project's setup process, we recommend referring to the article <a href='/decoding-project-setup'>Decoding Project Setup</a>. You can easily add new functionalities and libraries by running the command <span class='code'> Yarn add __dependency_name </span>. Additionally, for a detailed understanding of component generation and the overall project workflow in Next.js, check out the article titled <a href='/the-project-workflow-next-js'>The Project Workflow: Next JS</a>.</p><br><p>By carefully selecting and utilizing these technologies and dependencies, the project can leverage their advantages, streamline development workflows, and create robust, scalable, and efficient applications.</p>"
          }
        }
      ]
    }
  ]
}
